type NFTMetadata = record {
    name: text;
    description: text;
    image: text;
    attributes: vec Attribute;
};

type Attribute = record {
    trait_type: text;
    value: text;
};

type Certificate = record {
    id: text;
    registered: bool;
    metadata: opt NFTMetadata;
    author: text;
    short_id: text;
};

type Error = variant {
  NotFound: ErrorReason;
  PermissionDenied: ErrorReason;
  Validation: ErrorReason;
};

type ErrorReason = record {
    msg: text;
};

type Frame = record {
    id: text;
    nft: opt NFT
};

type Tag = record {
    id: text;
    short_id: text;
    is_certificate: bool;
    owner: text;
};

type NFT = record {
   id: text;
   contract_address: text;
   chain: text;
};

type VerifyResult = variant {
    Ok: variant {
        Certificate: Certificate;
        Frame: Frame;
    };
    Err: Error;
};

type FrameResult = variant {
    Ok: Frame;
    Err: Error;
};

type UpdateResult = variant {
    Ok: text;
    Err: Error;
};

type GetTagResult = variant {
    Ok: Tag;
    Err: Error;
};

type GetStorageResult = variant {
    Ok: principal;
    Err: Error;
};

type GetCertificateResult = variant {
    Ok: Certificate;
    Err: Error;
};

type StoreArg = record {
    key: text;
    content_type: text;
    content_encoding: text;
    content: blob;
    sha256: opt blob
};

type LastStorageResult = variant {
    Ok: principal;
    Err: Error;
};

type GetFramesResult = variant {
    Ok: vec Frame;
    Err: Error;
};

type GetCertificatesResult = variant {
    Ok: vec Certificate;
    Err: Error;
};

type GetTagsResult = variant {
    Ok: vec Tag;
    Err: Error;
}

service : {
    "add_storage_canister": (principal) -> (UpdateResult);
    "add_tag": (id: text, tag: Tag) -> (UpdateResult);
    "get_certificate": (tag_id: text) -> (GetCertificateResult) query;
    "get_storage_principal": (tag_id: text) -> (GetStorageResult) query;
    "get_tag": (tag_id: text) -> (GetTagResult);
    "get_tags": () -> (GetTagsResult) query;
    "is_admin": (user: principal) -> (bool) query;
    "register_certificate": (id: text) -> (UpdateResult);
    "save_certificate": (tag_id: text, metadata: NFTMetadata) -> (UpdateResult);
    "set_key": (key: text, value: text) -> (UpdateResult);
    "upload_media": (tag_id: text, media: StoreArg) -> (UpdateResult);
    "verify_tag": (msg: text) -> (VerifyResult);
    "set_nft_on_frame": (tag_id: text, nft: NFT) -> (UpdateResult);
    "get_frame": (tag_id: text) -> (FrameResult) query;
    "clean_frame": (tag_id: text) -> (UpdateResult);
    "get_last_storage_principal": () -> (LastStorageResult) query;
    "transfer_frame": (tag_id: text, to_address: text) -> (UpdateResult);
    "get_frames": () -> (GetFramesResult);
    "get_certificates": () -> (GetCertificatesResult);
};
