type TagMetadata = record {
    author: text;
    signature: text;
    owner: principal;
    nft: NFTMetadata;
};

type NFTMetadata = record {
    name: text;
    description: text;
    image: text;
    attributes: vec Attribute;
};

type Attribute = record {
    trait_type: text;
    value: text;
};

type Tag = record {
    id: nat;
    short_id: text;
    registered: bool;
    is_certificate: bool;
    owner: principal;
};

type CollectionResult = variant {
  TagMetadata : TagMetadata;
  Tag : Tag;
};

type Error = variant {
  DataNotFound: ErrorValue;
  CollectionNotFound: ErrorValue;
  PermissionDenied: ErrorValue;
  InvalidTag: ErrorValue;
};

type ErrorValue = record {
    msg : text;
};

type GetCollectionResult = variant { Ok : CollectionResult; Err : Error };
type VerifyResult = variant { Ok: text; Err: Error };

service : {
    "get_collection": (text, text) -> (GetCollectionResult) query;
    "verify_tag": (text) -> (VerifyResult) query;
}
